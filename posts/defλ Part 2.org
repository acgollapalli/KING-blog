#+BEGIN_EXPORT html
---
layout: post
title: defλ Part 2
---
#+END_EXPORT
#+TITLE: defλ Part 2
#+OPTIONS: toc:nil
#+EXPORT_FILE_NAME: ../_posts/2022-10-20-defλ-part-2.md

* Introduction
Last time we defined some primitives for a preliminary lisp (and associate some symbols while we're at it).
We have:
 + cons (ζ)
 + car (α)
 + cdr (ω) (or should this be β??)
 + nil (∅) and true (⊤)
 + cond (χ)

We still need:
 + quote (') and unquote (~)
 + eq (=)
 + apply (Λ)
 + eval (Ξ)
 + lambda (λ)
 + map (↦)

So without further ado... oh wait, we need some more types first.
** Preliminaries: Types and Tags
Last time, we defined a couple types and their associated tags: booleans and cons-cells.

Unfortunately, if we wish to have any hope of actually doing any lisp evaluation, we need quite a few more:
+ integers
+ characters
+ strings
+ symbols
+ keywords

Let's remind ourselves of our  categories:
+-------------------+-----------+
|Pointer Type       |Pointer tag|
+-------------------+-----------+
|general data       |#b000xxxxx |
+-------------------+-----------+
|numerical values   |#b001xxxxx |
+-------------------+-----------+
|displayable values |#b010xxxxx |
+-------------------+-----------+
|procedural data    |#b100xxxxx |
+-------------------+-----------+
|symbolic data      |#b101xxxxx |
+-------------------+-----------+
|structured data    |#b110xxxxx |
+-------------------+-----------+

Let's add a couple conditions:
+ If the most significant bit is 0, then the pointer refers to a value. That means that it should evaluate to itself.
+ If the fourth most significant bit of a value type is 1, that means that the value is directly encoded in the pointer itself. This also means that bits 55-0 are to be used for the value itself.
** Numerical Values
Let's define a few numerical types, although the only ones we're actually going to use right now is integers:
+---------------+-----------+
|Pointer Type   |Pointer tag|
+---------------+-----------+
|small int      |#b00110000 |
+---------------+-----------+
|big int        |#b00101000 |
+---------------+-----------+
|floating point |#b00101001 |
+---------------+-----------+

The small int only allows for signed values. Actually all the data types do right now. Perhaps someone better informed can inform me of the value of unsigned numbers, but as of right now, I do not know it, so I'm not going to worry about them. That said: if we need them, we can stipulate that the 5th least significant bit implies that the pointer refers to a signed number.

We're going to ignore big ints and floating points for now.

** Displayable Values
For displayable values, we really need characters, strings, and keywords. For simplicity's sake, we're going to have all characters be UTF-32 unicode characters, and we'll just encode these in the pointer itself.
+----------------+-----------+
|Pointer Type    |Pointer tag|
+----------------+-----------+
|utf-32 char     |#b01010000 |
+----------------+-----------+
|boolean         |#b01010001 |
+----------------+-----------+
|string          |#b01000000 |
+----------------+-----------+
|keyword         |#b01000001 |
+----------------+-----------+

Strings are like arrays of characters. We could encode them on a single continuous area of memory, just like we do a cons pair. However, if want to manipulate them, say, increase their length, then that's a pain, because we don't really have memory allocation or garbage collection yet. So instead we're going to treat them like lists (for now!). At a fundamental level, a pointer to a string points to a cons pair. I promise, we'll have all sorts of sweet immutable data structures later.

Keywords are just strings with different pointer tags.

** Symbolic Data
 Symbols are just strings cons'd to pointers. Again, this is just temporary for right now. I'm trying to keep things simple. We'll do this right soon enough.

 Quoted symbols are just symbols with a different pointer tag.
+-----------------+-----------+
|Pointer Type     |Pointer tag|
+-----------------+-----------+
|symbol           |#b001001   |
+-----------------+-----------+
|quoted symbol    |#b011001   |
+-----------------+-----------+
** Procedural Data
Procedures can also be quoted. How, you ask? Because if you can pass along a procedure, you can put it in a list. And if you can put it in a list, then it be passed to eval. And if it can be passed to eval as an object, and its something that could be called as a procedure, then it is quoteable.
+-----------------+-----------+
|Pointer Type     |Pointer tag|
+-----------------+-----------+
|procedure        |#b000001   |
+-----------------+-----------+
|quoted procedure |#b000001   |
+-----------------+-----------+

** Cons Pairs (again)
Now, let's reapproach the cons-pair, since we have a 6 bit memory tag now, and since we have to deal with quoting. Now, as any lisp hacker knows, you can quote a list and send it to eval, and have it return exactly that list. And since we defined a type for quoted symbol, we may as well also define a type for quoted cons-pairs. This has some nice consequences (no pun intended).
+-----------------+-----------+
|Pointer Type     |Pointer tag|
+-----------------+-----------+
|cons pair        |#b11000001 |
+-----------------+-----------+
|quoted cons pair |#b11010001 |
+-----------------+-----------+
Okay, on to the meat of the article.
* quote (') and unquote (~)
Because the only things you can quote (or should quote) are things that evaluate to something other than themselves. So far we have followed the convention that all things that do not evaluate to themselves have a least significant bit of 1. We'll now state this properly:
+ All quoteable data types have a least significant bit of 1 in their data type.
+ If an item is quotable, then the fourth least significant bit of its pointer is dedicated to declaring the items status as quoted or not quoted.

  As such =quote (')= simply checks the least significant bit, and if it is 1, sets the fourth least significant bit to 1. Similarly =unquote (~) checks the least significant bit, and sets the fourth least significant bit to 0.
* apply (Λ)
Okay, now we get to the fun stuff. If you were paying attention to the last post, you would have noticed something kind of... off. Namely, the evaluation steps were included in the example code for the procedures. Now for =cond=, this makes sense. In most lisps, =cond= is a special form. But here =cond= is not a special form. There are no special forms in this lisp. Instead, evaluation is controlled at the level of the function, and not at the level of =apply=. I think this gives a programmer a lot of flexibility. It blurs the line between function and macros and gets rid of the pesky problem of not having first-class macros in your lisp. Obviously, there are tradeoffs here. But I think this is the right way to go about it. We'll look at the syntax of how this looks from a programmer perspective when we get to =lambda=, but for now let's look at =apply=.

=apply= takes two arguments: a procedure (or a symbol pointing to a procedure), and a list of arguments.

Now, we stated part of this last time, but we'll add to it this time:
+ For procedures which take an unlimited number of arguments, it must receive a list of arguments in register x7.
+ For procedures which take a number of required, positional arguments, and then an unlimited number of optional arguments, the arguments will be placed in registers x0-5 and the succeeding arguments placed in a list in x7.a
+ (For now!) procedures may only have 7 required arguments.

Actually, wait, I forgot one very important thing: how does apply know how many arguments a procedure takes, and which registers to put the arguments in? I don't know. Let's just pretend that there's a magical function we haven't written yet that returns the number of required, positional arguments in =x0= and whether the function has an unlimited number of arguments in =x2=. We'll just call this: =args=.

#+begin_src asm
    .text
    .global apply
apply:
 /* store the stack pointer and return address */
    stp x29, x30, [sp], #-16

 /* Let's save our procedure and argument list. That way we can
    come back to them later.*/
    stp x0, x1, [sp], #-16

 /* Let's get the required arguments and whether we have
    an optional list of arguments of unlimited length */
    bl args

 /* Now we're going to store the number of arguments in x6 */
    mov x6, x0

    ldr x7, [sp, #16] /* get the argument list */
    mov x0, x7

 /* storing the first argument to keep x0 free */
    cmp x6, #0
    blgt car /* call car if number of arguments > 0*/
    str x0, [sp, #-16] /* store first arg on stack */
    sub x6, x6, #1 /* decrement number of required args */
    bleq cdr         /* call cdr on our arglist */
    mov x7, x0     /* keep our arglist in x7*/


 /* and now some iteration */
    bl apply_iterator
    mov x1, x0
    bl apply_iterator
    mov x2, x0
    bl apply_iterator
    mov x3, x0
    bl apply_iterator
    mov x4, x0
    bl apply_iterator
    mov x5, x0
    bl apply_iterator
    mov x6, x0

 /* now our argument list is in x7 and x1-5 have their
    respective arguments, let's get the first arg in x0 */
    ldr x0, [sp, #8]

 /* Let's get back our actual procedure we'll put it in x16*/
    ldr x16, [sp, #32]

 /* And let's free up the stack */
    add sp, sp, #32

 /* arguments 1-7 (or nils) are in regists x0-x6, and the rest of the arguments
    are in x7. It's time to actually call our procedure with all its arguments */
    blr x16

 /* Get back the stack pointer and return address */
    ldp x29, x30, [sp], #16

 /* and return */
    ret

apply_iterator:
    cmp x6, #0       /* let's see if we need another arg */
    mov x0, x7
    blgt car         /* call car if number of arguments > 0*/
    moveq x0, #4     /* set x0 to nil of x6 = 0 */
    bleq cdr         /* call cdr on our arglist */
    moveq x7, x0     /* keep our arglist in x7 if it calls for iteration */
    sub x6, x6, #1   /* decrement number of required args */
#+end_src
* eval (Ξ)
Okay, here comes the hard bit. Eval is
